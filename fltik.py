from Crypto.Cipher import AES
import base64
import marshal

def unpad(data):
    return data[:-data[-1]]

encoded_data = b""""""

raw = base64.b64decode(encoded_data)
key = raw[:16]
iv = raw[16:32]
ciphertext = raw[32:]

cipher = AES.new(key, AES.MODE_CBC, iv)
decrypted = unpad(cipher.decrypt(ciphertext))
code = marshal.loads(decrypted)
exec(code)
