import os
import re
import time
import random
import threading
import platform
import subprocess
import logging
import sys
try:
    import chromedriver_autoinstaller
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from PIL import Image
    from datetime import datetime
    from colorama import init, Fore, Style
    import customtkinter as ctk
    import tkinter as tk
    import pytesseract
    from bs4 import BeautifulSoup
except ImportError as e:
    print(f"Th∆∞ vi·ªán {e.name} ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. ƒêang c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt...")
    os.system("pip install customtkinter selenium Pillow pytesseract chromedriver-autoinstaller beautifulsoup4")
    print("ƒê√£ c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán. Vui l√≤ng ch·∫°y l·∫°i script.")
    exit(0)

# Kh·ªüi t·∫°o colorama
init(autoreset=True)

# T·∫Øt log c·ªßa Selenium, ChromeDriver v√† urllib3
logging.getLogger('selenium').setLevel(logging.CRITICAL)
logging.getLogger('webdriver').setLevel(logging.CRITICAL)
logging.getLogger('urllib3').setLevel(logging.CRITICAL)

# H√†m ti·ªán √≠ch
def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def log_message(message, color=Fore.WHITE):
    print(f"{color}{message}{Style.RESET_ALL}")

def loading_animation(message, duration=2):
    frames = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è']
    end_time = time.time() + duration
    i = 0
    while time.time() < end_time:
        print(f"\r{Fore.LIGHTYELLOW_EX}{frames[i % len(frames)]} ‚è≥ {message}{Style.RESET_ALL}", end="")
        i += 1
        time.sleep(0.1)
    print()

def open_image_in_termux(file_path):
    try:
        if not os.path.exists(file_path):
            log_message(f"L·ªói: Kh√¥ng t√¨m th·∫•y file {file_path}.", Fore.RED)
            return False
        result = subprocess.run(["termux-open", file_path], capture_output=True, text=True)
        if result.returncode == 0:
            log_message("ƒê√£ m·ªü h√¨nh CAPTCHA. Vui l√≤ng ki·ªÉm tra trong tr√¨nh xem m·∫∑c ƒë·ªãnh.", Fore.LIGHTYELLOW_EX)
            log_message("Sau khi xem, nh·∫•n n√∫t Quay l·∫°i tr√™n ƒëi·ªán tho·∫°i ƒë·ªÉ tr·ªü v·ªÅ Termux v√† nh·∫≠p m√£ CAPTCHA.", Fore.LIGHTYELLOW_EX)
            return True
        else:
            log_message(f"L·ªói khi m·ªü h√¨nh trong Termux: {result.stderr}", Fore.RED)
            return False
    except Exception as e:
        log_message(f"L·ªói khi m·ªü h√¨nh trong Termux: {e}", Fore.RED)
        return False

def is_termux():
    return "termux" in os.environ.get("SHELL", "").lower() or "com.termux" in os.environ.get("PREFIX", "").lower()

def format_time(seconds):
    mins, secs = divmod(int(seconds), 60)
    return f"{mins:02d}:{secs:02d}"

def is_valid_tiktok_url(url, mode):
    full_url_pattern = r'^https://www\.tiktok\.com/@[a-zA-Z0-9._]+/video/\d+(\?.*)?$'
    short_url_pattern = r'^https://vt\.tiktok\.com/[a-zA-Z0-9]+/?$'
    profile_url_pattern = r'^https://www\.tiktok\.com/@[a-zA-Z0-9._]+$'
    if mode == "Followers":
        return re.match(profile_url_pattern, url)
    return re.match(full_url_pattern, url) or re.match(short_url_pattern, url)

def banner():
    b = f"""
    {Fore.LIGHTWHITE_EX}   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     {Fore.LIGHTMAGENTA_EX}
    {Fore.LIGHTWHITE_EX}   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù     {Fore.LIGHTMAGENTA_EX}
    {Fore.LIGHTWHITE_EX}   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïî‚ïù      {Fore.LIGHTMAGENTA_EX}
    {Fore.LIGHTWHITE_EX}   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ïî‚ïù       {Fore.LIGHTMAGENTA_EX}
    {Fore.LIGHTWHITE_EX}   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     {Fore.LIGHTMAGENTA_EX}
    {Fore.LIGHTWHITE_EX}   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù     {Fore.LIGHTMAGENTA_EX}

    {Fore.LIGHTCYAN_EX}   TooL T√≠ch H·ª£p  - TƒÇNG T∆Ø∆†NG T√ÅC T·ª∞ ƒê·ªòNG       {Fore.LIGHTMAGENTA_EX}
    {Fore.LIGHTWHITE_EX}   Phi√™n b·∫£n: 1.0.9 | Ph√°t tri·ªÉn: B05 - TooL    {Fore.LIGHTMAGENTA_EX}
    {Fore.YELLOW}       ‚è∞ Ng√†y: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
    """
    print(b)

def display_menu(available_modes, mode_status):
    clear_screen()
    print(f"\n{Fore.CYAN}‚ï≠{'‚îÄ' * 40}‚ïÆ")
    print(f"‚îÇ{Fore.WHITE}TIKTOK BOT - CH·ªåN CH·∫æ ƒê·ªò TƒÇNG T∆Ø∆†NG T√ÅC {Fore.CYAN}‚îÇ")
    print(f"‚ï∞{'‚îÄ' * 40}‚ïØ{Style.RESET_ALL}")
    
    mode_map = {i + 1: mode for i, mode in enumerate(available_modes)}
    for i, mode in enumerate(available_modes, 1):
        icon = {
            "Hearts": "‚ù§Ô∏è", "Views": "üëÅÔ∏è", "Shares": "‚ÜóÔ∏è",
            "Favorites": "‚≠ê", "Followers": "üë•", "Live Stream": "üìπ"
        }.get(mode, "")
        
        status = mode_status.get(mode)
        status_text = "Active" if status == "Active" else "Stop"
        status_color = Fore.GREEN if status == "Active" else Fore.RED
        
        print(f" {Fore.WHITE}{i:>2}. {mode:<15} {icon} {status_color}{status_text}{Style.RESET_ALL}")
    
    while True:
        try:
            print(f"\n{Fore.CYAN}‚îå{'‚îÄ' * 40}‚îê")
            choice = input(f"{Fore.CYAN}‚îÇ{Fore.WHITE} Nh·∫≠p s·ªë t·ª´ 1-{len(available_modes)} (VD: 123 ƒë·ªÉ ch·∫°y Hearts, Views, Shares): {Fore.CYAN}‚îÇ\n{Fore.CYAN}‚îî{'‚îÄ' * 40}‚îò\n{Fore.WHITE}‚ûú {Style.RESET_ALL}")
            
            if not choice.isdigit():
                raise ValueError
            
            selected_modes = []
            for char in choice:
                num = int(char)
                if 1 <= num <= len(available_modes):
                    mode = mode_map[num]
                    if mode_status.get(mode) == "Stop":
                        print(f"\n{Fore.RED}‚ö† Ch·∫ø ƒë·ªô {mode} t·∫°m ng·ª´ng ho·∫°t ƒë·ªông. Vui l√≤ng ch·ªçn l·∫°i.{Style.RESET_ALL}")
                        time.sleep(2)
                        return display_menu(available_modes, mode_status)
                    selected_modes.append(mode)
                else:
                    print(f"\n{Fore.RED}‚ö† Vui l√≤ng nh·∫≠p s·ªë t·ª´ 1 ƒë·∫øn {len(available_modes)}{Style.RESET_ALL}")
                    raise ValueError
            
            if not selected_modes:
                raise ValueError
            return selected_modes
        except ValueError:
            print(f"\n{Fore.RED}‚ö† L·ªói: Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá (VD: 123){Style.RESET_ALL}")
            time.sleep(2)

def get_input(prompt, mode=""):
    icons = {
        "URL": "üåê", "Hearts": "‚ù§Ô∏è", "Views": "üëÅÔ∏è", "Shares": "‚ÜóÔ∏è",
        "Favorites": "‚≠ê", "Followers": "üë•"
    }
    icon = icons.get(mode, "‚úèÔ∏è")
    prompt_width = len(prompt) + 12
    
    print(f"\n{Fore.CYAN}‚îå{'‚îÄ' * prompt_width}‚îê")
    print(f"‚îÇ {icon} {Fore.WHITE}{prompt}{Fore.CYAN} ‚îÇ")
    print(f"‚îî{'‚îÄ' * prompt_width}‚ïØ")
    return input(f"{Fore.WHITE}‚ûú {Style.RESET_ALL}").strip()

class Bot:
    def __init__(self):
        self.driver = None
        self.running = False
        self.views = 0
        self.hearts = 0
        self.shares = 0
        self.favorites = 0
        self.followers = 0
        self.start_time = time.time()
        self.success_count = 0
        self.last_update_time = time.time()
        self.last_action = time.time()
        self.cycle_counts = {"Hearts": 0, "Views": 0, "Shares": 0, "Favorites": 0, "Followers": 0, "Live Stream": 0}

    def check_api_status(self):
        mode_status = {}
        available_modes = ["Hearts", "Views", "Shares", "Favorites", "Live Stream", "Followers"]
        buttons = {
            "Hearts": '//button[contains(@class, "t-hearts-button")]',
            "Views": '//button[contains(@class, "t-views-button")]',
            "Shares": '//button[contains(@class, "t-shares-button")]',
            "Favorites": '//button[contains(@class, "t-favorites-button")]',
            "Live Stream": '//button[contains(@class, "t-livestream-button")]',
            "Followers": '//button[@class="btn btn-primary rounded-0 t-followers-button"]'
        }

        for text, xpath in buttons.items():
            try:
                button = WebDriverWait(self.driver, 5).until(
                    EC.presence_of_element_located((By.XPATH, xpath))
                )
                mode_status[text] = "Active" if not button.get_attribute("disabled") else "Stop"
            except Exception:
                mode_status[text] = "Stop"
        
        return available_modes, mode_status

    def setup_bot(self):
        loading_animation("ƒêang kh·ªüi t·∫°o bot")
        chromedriver_autoinstaller.install()
        options = Options()
        options.add_argument("--headless")
        options.add_argument("--disable-gpu")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-notifications")
        options.add_argument("--log-level=3")
        options.add_argument("--disable-webgl")
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        service = Service(log_path=os.devnull, service_args=["--silent"])
        try:
            self.driver = webdriver.Chrome(service=service, options=options)
        except Exception as e:
            log_message(f"L·ªói kh·ªüi t·∫°o Chrome: {e}", Fore.RED)
            return False

        self.driver.execute_cdp_cmd("Network.setBlockedURLs", {"urls": ["https://fundingchoicesmessages.google.com/*"]})
        self.driver.execute_cdp_cmd("Network.enable", {})
        if not self.get_captcha():
            log_message("Kh√¥ng th·ªÉ gi·∫£i CAPTCHA. Tho√°t.", Fore.RED)
            return False

        return self.check_api_status()

    def get_captcha(self):
        url = "http://zefoy.com"
        try:
            self.driver.get(url)
            WebDriverWait(self.driver, 20).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))
            for attempt in range(3):
                try:
                    captcha_img_tag = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, '//img[@class="img-thumbnail card-img-top border-0"]')))
                    captcha_img_tag.screenshot('captcha.png')
                    log_message("ƒê√£ l∆∞u CAPTCHA th√†nh captcha.png", Fore.LIGHTGREEN_EX)
                    if is_termux():
                        if not open_image_in_termux('captcha.png'):
                            log_message("Kh√¥ng th·ªÉ m·ªü h√¨nh CAPTCHA. Vui l√≤ng m·ªü captcha.png th·ªß c√¥ng ƒë·ªÉ xem.", Fore.RED)
                    try:
                        above_captcha = self.driver.find_element(By.XPATH, '//div[contains(@class, "card-body")]//p')
                        above_text = above_captcha.text
                        log_message(f"VƒÉn b·∫£n ph√≠a tr√™n CAPTCHA: {above_text}", Fore.LIGHTYELLOW_EX)
                    except:
                        log_message("", Fore.LIGHTYELLOW_EX)
                    captcha_text = input(f"{Fore.WHITE}üëâ Nh·∫≠p m√£ CAPTCHA: {Style.RESET_ALL}")
                    if not captcha_text:
                        log_message("Ch∆∞a nh·∫≠p m√£ CAPTCHA.", Fore.RED)
                        continue
                    input_field = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, '//input[@class="form-control form-control-lg text-center rounded-0 remove-spaces"]')))
                    input_field.clear()
                    input_field.send_keys(captcha_text)
                    try:
                        submit_button = WebDriverWait(self.driver, 5).until(
                            EC.element_to_be_clickable((By.XPATH, '//button[@type="submit"]')))
                        submit_button.click()
                    except:
                        log_message("Kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng c·∫ßn n√∫t g·ª≠i.", Fore.LIGHTYELLOW_EX)
                    time.sleep(3)
                    if self.driver.find_elements(By.XPATH, '/html/body/div[6]/div/div[2]/div/div/div[1]'):
                        log_message("CAPTCHA ƒë∆∞·ª£c ch·∫•p nh·∫≠n.", Fore.LIGHTGREEN_EX)
                        return True
                    else:
                        log_message("CAPTCHA kh√¥ng ƒë√∫ng, th·ª≠ l·∫°i...", Fore.LIGHTYELLOW_EX)
                        self.driver.refresh()
                        time.sleep(3)
                except Exception as e:
                    log_message(f"Th·ª≠ l·∫ßn {attempt + 1} th·∫•t b·∫°i: {e}", Fore.RED)
                    if attempt < 2:
                        time.sleep(3)
                    else:
                        return False
        except Exception as e:
            log_message(f"L·ªói khi gi·∫£i CAPTCHA: {e}", Fore.RED)
            return False

    def parse_wait_time(self, text):
        match = re.search(r'(\d+) minute\(s\) (\d{1,2}) second\(s\)', text)
        if not match:
            match = re.search(r'(\d+) minute\(s\) (\d{1,2}) seconds', text)
        if match:
            minutes = int(match.group(1))
            seconds = int(match.group(2))
            return minutes * 60 + seconds + 2
        log_message(f"Kh√¥ng th·ªÉ ph√¢n t√≠ch th·ªùi gian ch·ªù: {text}", Fore.RED)
        return 0

    def update_progress(self, mode, increment):
        total = getattr(self, f"{mode.lower()}")
        elapsed = int(time.time() - self.start_time)
        progress_line = f"{Fore.LIGHTGREEN_EX}‚úÖ ƒê√£ th√™m th√†nh c√¥ng {increment} {mode} | T·ªïng: {total} | Th·ªùi gian ch·∫°y: {format_time(elapsed)}{Style.RESET_ALL}"
        print(progress_line)

    def wait_with_countdown(self, wait_seconds, message="ƒêang ch·ªù tƒÉng"):
        spinner = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è']
        start_wait = time.time()
        while time.time() - start_wait < wait_seconds and self.running:
            elapsed = time.time() - start_wait
            remaining = max(0, wait_seconds - elapsed)
            percent = (elapsed / wait_seconds) * 100
            mins, secs = divmod(int(remaining), 60)
            countdown_line = f"{Fore.LIGHTYELLOW_EX}{spinner[int(time.time() * 2) % len(spinner)]} {message}: {mins:02d}:{secs:02d} | Ho√†n th√†nh: {percent:.1f}%{Style.RESET_ALL}"
            sys.stdout.write(f"\r{countdown_line}")
            sys.stdout.flush()
            time.sleep(0.1)
        sys.stdout.write("\r" + " " * 70 + "\r")
        sys.stdout.flush()

    def increment_mode_count(self, mode):
        if mode == "Views":
            self.views += 500
            return 500
        elif mode == "Hearts":
            increment = random.randint(11, 15)
            self.hearts += increment
            return increment
        elif mode == "Shares":
            increment = random.randint(70, 80)
            self.shares += increment
            return increment
        elif mode == "Favorites":
            increment = random.randint(3, 6)
            self.favorites += increment
            return increment
        elif mode == "Followers":
            increment = random.randint(3, 6)
            self.followers += increment
            return increment
        return 0

    def combo_loop(self, vidUrl, mode_amounts, selected_modes):
        data = {
            "Hearts": {
                "MainButton": '//button[@class="btn btn-primary rounded-0 t-hearts-button"]',
                "Input": '/html/body/div[8]/div/form/div/input',
                "Send": '/html/body/div[8]/div/div/div[1]/div/form/button',
                "Search": '/html/body/div[8]/div/form/div/div/button',
                "TextBeforeSend": '/html/body/div[8]/div/div/span',
                "TextAfterSend": '/html/body/div[8]/div/div/span[1]'
            },
            "Views": {
                "MainButton": '//button[@class="btn btn-primary rounded-0 t-views-button"]',
                "Input": '/html/body/div[10]/div/form/div/input',
                "Send": '/html/body/div[10]/div/div/div[1]/div/form/button',
                "Search": '/html/body/div[10]/div/form/div/div/button',
                "TextBeforeSend": '/html/body/div[10]/div/div/span',
                "TextAfterSend": '/html/body/div[10]/div/div/span[1]'
            },
            "Shares": {
                "MainButton": '//button[@class="btn btn-primary rounded-0 t-shares-button"]',
                "Input": '/html/body/div[11]/div/form/div/input',
                "Send": '/html/body/div[11]/div/div/div[1]/div/form/button',
                "Search": '/html/body/div[11]/div/form/div/div/button',
                "TextBeforeSend": '/html/body/div[11]/div/div/span',
                "TextAfterSend": '/html/body/div[11]/div/div/span[1]'
            },
            "Favorites": {
                "MainButton": '//button[@class="btn btn-primary rounded-0 t-favorites-button"]',
                "Input": '/html/body/div[12]/div/form/div/input',
                "Send": '/html/body/div[12]/div/div/div[1]/div/form/button',
                "Search": '/html/body/div[12]/div/form/div/div/button',
                "TextBeforeSend": '/html/body/div[12]/div/div/span',
                "TextAfterSend": '/html/body/div[12]/div/div/span[1]'
            },
            "Followers": {
                "MainButton": '//button[@class="btn btn-primary rounded-0 t-followers-button"]',
                "Input": '/html/body/div[9]/div/form/div/input',
                "Send": '/html/body/div[9]/div/div/div[1]/div/form/button',
                "Search": '/html/body/div[9]/div/form/div/div/button',
                "TextBeforeSend": '/html/body/div[9]/div/div/span',
                "TextAfterSend": '/html/body/div[9]/div/div/span[1]'
            },
        }

        modes = selected_modes
        current_mode_idx = 0
        cooldown_modes = {mode: 0 for mode in modes}  # Theo d√µi cooldown c·ªßa m·ªói ch·∫ø ƒë·ªô

        while self.running and any(getattr(self, f"{mode.lower()}") < amount for mode, amount in mode_amounts.items()):
            mode = modes[current_mode_idx]
            amount = mode_amounts[mode]
            if getattr(self, f"{mode.lower()}") >= amount:
                current_mode_idx = (current_mode_idx + 1) % len(modes)
                continue

            try:
                # Quay l·∫°i trang ch√≠nh tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ch·ª©c nƒÉng m·ªõi
                self.driver.get("http://zefoy.com")
                WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))
                time.sleep(2)

                try:
                    main_button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, data[mode]["MainButton"]))
                    )
                    main_button.click()
                except:
                    log_message(f"‚ö† H·∫øt t√†i nguy√™n cho {mode}, s·∫Ω th·ª≠ l·∫°i ·ªü v√≤ng l·∫∑p ti·∫øp theo.", Fore.YELLOW)
                    current_mode_idx = (current_mode_idx + 1) % len(modes)
                    time.sleep(2)
                    if current_mode_idx == 0:
                        summary = f"\n{Fore.CYAN}‚ï≠{'‚îÄ' * 50}‚ïÆ\n‚îÇ üìä T·ªïng h·ª£p sau 1 l∆∞·ª£t: {', '.join(f'ƒê√£ tƒÉng {self.cycle_counts[mode]} {mode}' for mode in mode_amounts)} ‚îÇ\n‚ï∞{'‚îÄ' * 50}‚ïØ{Style.RESET_ALL}"
                        log_message(summary, Fore.CYAN)
                        self.cycle_counts = {mode: 0 for mode in self.cycle_counts}
                    continue

                time.sleep(2)
                input_field = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.XPATH, data[mode]["Input"]))
                )
                input_field.send_keys(vidUrl)
                time.sleep(2)
                search_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, data[mode]["Search"]))
                )
                search_button.click()
                time.sleep(6)
                try:
                    wait_text = self.driver.find_element(By.XPATH, data[mode]["TextBeforeSend"]).text
                except:
                    wait_text = ""
                if wait_text:
                    wait_seconds = self.parse_wait_time(wait_text)
                    cooldown_modes[mode] = wait_seconds
                    # Ki·ªÉm tra xem t·∫•t c·∫£ ch·∫ø ƒë·ªô c√≥ b·ªã mute (cooldown ‚â• 10 ph√∫t) kh√¥ng
                    active_modes = [m for m in modes if getattr(self, f"{m.lower()}") < mode_amounts[m]]
                    if all(cooldown_modes[m] >= 600 for m in active_modes) and active_modes:
                        # In th√¥ng b√°o cooldown cho t·∫•t c·∫£ ch·∫ø ƒë·ªô trong active_modes
                        for m in active_modes:
                            log_message(f"‚è≥ Cooldown {m} qu√° l√¢u ({cooldown_modes[m]//60} ph√∫t), chuy·ªÉn sang ch·∫ø ƒë·ªô kh√°c.", Fore.YELLOW)
                        max_cooldown = max(cooldown_modes[m] for m in active_modes)
                        max_cooldown_minutes = max_cooldown // 60
                        log_message(f"\n{Fore.RED}üö´ IP ƒë√£ b·ªã mute, ƒëang ƒë·∫øm ng∆∞·ª£c {max_cooldown_minutes} ph√∫t...{Style.RESET_ALL}", Fore.RED)
                        self.wait_with_countdown(max_cooldown, "ƒê·∫øm ng∆∞·ª£c IP mute")
                        # Reset cooldown sau khi ƒë·ª£i
                        for m in cooldown_modes:
                            cooldown_modes[m] = 0
                        current_mode_idx = 0  # B·∫Øt ƒë·∫ßu l·∫°i t·ª´ ch·∫ø ƒë·ªô ƒë·∫ßu
                        continue
                    if wait_seconds >= 600:  # Cooldown ‚â• 10 ph√∫t nh∆∞ng ch∆∞a mute h·∫øt
                        log_message(f"‚è≥ Cooldown {mode} qu√° l√¢u ({wait_seconds//60} ph√∫t), chuy·ªÉn sang ch·∫ø ƒë·ªô kh√°c.", Fore.YELLOW)
                        current_mode_idx = (current_mode_idx + 1) % len(modes)
                        if current_mode_idx == 0:
                            summary = f"\n{Fore.CYAN}‚ï≠{'‚îÄ' * 50}‚ïÆ\n‚îÇ üìä T·ªïng h·ª£p sau 1 l∆∞·ª£t: {', '.join(f'ƒê√£ tƒÉng {self.cycle_counts[mode]} {mode}' for mode in mode_amounts)} ‚îÇ\n‚ï∞{'‚îÄ' * 50}‚ïØ{Style.RESET_ALL}"
                            log_message(summary, Fore.CYAN)
                            self.cycle_counts = {mode: 0 for mode in self.cycle_counts}
                        continue
                    self.wait_with_countdown(wait_seconds)  # Ch·ªâ d√πng "ƒêang ch·ªù tƒÉng"
                    continue
                send_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, data[mode]["Send"]))
                )
                send_button.click()
                time.sleep(7)
                wait_text = self.driver.find_element(By.XPATH, data[mode]["TextAfterSend"]).text
                wait_seconds = self.parse_wait_time(wait_text)
                increment = self.increment_mode_count(mode)
                self.success_count += 1
                self.cycle_counts[mode] += increment
                self.last_action = time.time()
                self.update_progress(mode, increment)
                self.wait_with_countdown(wait_seconds)  # Ch·ªâ d√πng "ƒêang ch·ªù tƒÉng"
                cooldown_modes[mode] = 0  # Reset cooldown khi th√†nh c√¥ng

                current_mode_idx = (current_mode_idx + 1) % len(modes)
                if current_mode_idx == 0:
                    summary = f"\n{Fore.CYAN}‚ï≠{'‚îÄ' * 50}‚ïÆ\n‚îÇ üìä T·ªïng h·ª£p sau 1 l∆∞·ª£t: {', '.join(f'ƒê√£ tƒÉng {self.cycle_counts[mode]} {mode}' for mode in mode_amounts)} ‚îÇ\n‚ï∞{'‚îÄ' * 50}‚ïØ{Style.RESET_ALL}"
                    log_message(summary, Fore.CYAN)
                    self.cycle_counts = {mode: 0 for mode in self.cycle_counts}
            except Exception as e:
                log_message(f"L·ªói trong ch·∫ø ƒë·ªô {mode}: {e}", Fore.RED)
                current_mode_idx = (current_mode_idx + 1) % len(modes)
                time.sleep(5)
                if current_mode_idx == 0:
                    summary = f"\n{Fore.CYAN}‚ï≠{'‚îÄ' * 50}‚ïÆ\n‚îÇ üìä T·ªïng h·ª£p sau 1 l∆∞·ª£t: {', '.join(f'ƒê√£ tƒÉng {self.cycle_counts[mode]} {mode}' for mode in mode_amounts)} ‚îÇ\n‚ï∞{'‚îÄ' * 50}‚ïØ{Style.RESET_ALL}"
                    log_message(summary, Fore.CYAN)
                    self.cycle_counts = {mode: 0 for mode in self.cycle_counts}

        # Hi·ªÉn th·ªã t·ªïng h·ª£p k·∫øt qu·∫£ cu·ªëi c√πng
        summary = f"\n{Fore.CYAN}‚ï≠{'‚îÄ' * 50}‚ïÆ\n‚îÇ üìä T·ªïng h·ª£p cu·ªëi c√πng: {', '.join(f'ƒê√£ tƒÉng {getattr(self, mode.lower())} {mode}' for mode in mode_amounts)} ‚îÇ\n‚ï∞{'‚îÄ' * 50}‚ïØ{Style.RESET_ALL}"
        log_message(summary, Fore.CYAN)

    def stop(self):
        self.running = False
        if self.driver:
            try:
                self.driver.quit()
            except Exception:
                pass

def main():
    clear_screen()
    banner()
    loading_animation("ƒêang kh·ªüi ƒë·ªông h·ªá th·ªëng")
    bot = Bot()
    result = bot.setup_bot()
    if not result:
        return
    available_modes, mode_status = result

    while True:
        selected_modes = display_menu(available_modes, mode_status)
        if not selected_modes:
            continue

        # Nh·∫≠p URL
        url_prompt = "Nh·∫≠p URL profile TikTok" if "Followers" in selected_modes else "Nh·∫≠p URL video TikTok"
        vid_url = get_input(url_prompt, "URL")
        if not is_valid_tiktok_url(vid_url, "Followers" if "Followers" in selected_modes else "Hearts"):
            log_message("URL TikTok kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p URL video ho·∫∑c profile TikTok h·ª£p l·ªá.", Fore.RED)
            continue

        # Nh·∫≠p s·ªë l∆∞·ª£ng cho t·ª´ng ch·∫ø ƒë·ªô
        mode_amounts = {}
        mode_vn = {
            "Hearts": "L∆∞·ª£t Th√≠ch ‚ù§Ô∏è", "Views": "L∆∞·ª£t Xem üëÅÔ∏è", "Shares": "L∆∞·ª£t Chia S·∫ª ‚ÜóÔ∏è",
            "Favorites": "L∆∞·ª£t Y√™u Th√≠ch ‚≠ê", "Followers": "L∆∞·ª£t Follow üë•", "Live Stream": "Live Stream üìπ"
        }
        for mode in selected_modes:
            try:
                amount = int(get_input(f"Nh·∫≠p s·ªë l∆∞·ª£ng {mode_vn[mode]}", mode))
                mode_amounts[mode] = amount
            except ValueError:
                log_message("S·ªë l∆∞·ª£ng ph·∫£i l√† m·ªôt s·ªë.", Fore.RED)
                break
        else:  # N·∫øu kh√¥ng c√≥ l·ªói trong v√≤ng l·∫∑p
            print(f"\n{Fore.LIGHTGREEN_EX}‚ï≠{'‚îÄ' * 50}‚ïÆ\n‚îÇ üöÄ B·∫Øt ƒë·∫ßu tƒÉng {', '.join(mode_vn[mode] for mode in selected_modes)}... ‚îÇ\n‚ï∞{'‚îÄ' * 50}‚ïØ{Style.RESET_ALL}")
            bot.running = True
            bot.start_time = time.time()
            bot.views = 0
            bot.hearts = 0
            bot.shares = 0
            bot.favorites = 0
            bot.followers = 0
            bot.success_count = 0
            bot.cycle_counts = {mode: 0 for mode in bot.cycle_counts}  # Reset cycle counts

            bot_thread = threading.Thread(target=bot.combo_loop, args=(vid_url, mode_amounts, selected_modes))
            bot_thread.start()

            try:
                while bot.running:
                    time.sleep(1)
            except KeyboardInterrupt:
                log_message("\nüõë ƒêang d·ª´ng bot...", Fore.LIGHTYELLOW_EX)
                bot.stop()
                bot_thread.join()
                log_message("‚úÖ Bot ƒë√£ d·ª´ng th√†nh c√¥ng.", Fore.LIGHTGREEN_EX)
                print(f"{Fore.LIGHTMAGENTA_EX}‚ï≠{'‚îÄ' * 50}‚ïÆ\n‚îÇ üëâ Nh·∫≠p URL TikTok m·ªõi ho·∫∑c 'exit' ƒë·ªÉ tho√°t: ‚îÇ\n‚ï∞{'‚îÄ' * 50}‚ïØ{Style.RESET_ALL}")
                new_url = input(f"{Fore.WHITE}‚ûú {Style.RESET_ALL}").strip().lower()
                if new_url == 'exit':
                    break
                if not is_valid_tiktok_url(new_url, "Followers" if "Favorites" in selected_modes else "Hearts"):
                    log_message("URL TikTok kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p URL video ho·∫∑c profile TikTok h·ª£p l·ªá.", Fore.RED)
                    continue
                vid_url = new_url
                available_modes, mode_status = bot.check_api_status()
                continue

            bot_thread.join()
            log_message(f"\n{Fore.LIGHTGREEN_EX}‚ï≠{'‚îÄ' * 50}‚ïÆ\n‚îÇ üéâ Ho√†n th√†nh! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng BaoDz Bot! ‚îÇ\n‚ï∞{'‚îÄ' * 50}‚ïØ{Style.RESET_ALL}")
            break

if __name__ == "__main__":
    main()
